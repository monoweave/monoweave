// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CLI CLI Args passes cli flags to monoweave 1`] = `
{
  "access": "infer",
  "applyChangeset": true,
  "autoCommit": true,
  "autoCommitMessage": "release",
  "changelogFilename": "changelog.md",
  "changesetFilename": "changes.json",
  "changesetIgnorePatterns": [
    "*.test.js",
  ],
  "commitIgnorePatterns": [
    "skip-ci",
  ],
  "conventionalChangelogConfig": "@my/config",
  "cwd": "/tmp",
  "dryRun": true,
  "forceWriteChangeFiles": true,
  "git": {
    "baseBranch": "main",
    "commitSha": "HEAD",
    "push": true,
    "remote": "origin",
    "tag": false,
  },
  "jobs": 6,
  "logLevel": "0",
  "maxConcurrentReads": 3,
  "maxConcurrentWrites": 4,
  "packageGroupManifestField": "group",
  "packageGroups": undefined,
  "persistVersions": true,
  "plugins": [
    "plugin-a",
    "plugin-b",
  ],
  "prerelease": true,
  "prereleaseId": "rc",
  "prereleaseNPMTag": "beta",
  "registryMode": "npm",
  "registryUrl": "http://example.com",
  "topological": true,
  "topologicalDev": true,
  "versionStrategy": {
    "minimumStrategy": "minor",
  },
}
`;

exports[`CLI CLI Args passes empty config if no cli flags set 1`] = `
{
  "access": undefined,
  "applyChangeset": false,
  "autoCommit": undefined,
  "autoCommitMessage": undefined,
  "changelogFilename": undefined,
  "changesetFilename": undefined,
  "changesetIgnorePatterns": undefined,
  "commitIgnorePatterns": undefined,
  "conventionalChangelogConfig": undefined,
  "cwd": undefined,
  "dryRun": undefined,
  "forceWriteChangeFiles": undefined,
  "git": {
    "baseBranch": undefined,
    "commitSha": undefined,
    "push": undefined,
    "remote": undefined,
    "tag": undefined,
  },
  "jobs": 0,
  "logLevel": undefined,
  "maxConcurrentReads": 0,
  "maxConcurrentWrites": 0,
  "packageGroupManifestField": undefined,
  "packageGroups": undefined,
  "persistVersions": undefined,
  "plugins": undefined,
  "prerelease": undefined,
  "prereleaseId": undefined,
  "prereleaseNPMTag": undefined,
  "registryMode": undefined,
  "registryUrl": undefined,
  "topological": undefined,
  "topologicalDev": undefined,
  "versionStrategy": {
    "minimumStrategy": undefined,
  },
}
`;

exports[`CLI Config File gives precedence to cli flags over config file 1`] = `
{
  "access": "public",
  "applyChangeset": false,
  "autoCommit": true,
  "autoCommitMessage": "chore: release",
  "changelogFilename": "from_file.changelog.md",
  "changesetFilename": "from_file.changes.json",
  "changesetIgnorePatterns": [
    "*.test.js",
    "*.snap",
  ],
  "commitIgnorePatterns": [
    "ignore-me",
  ],
  "conventionalChangelogConfig": "@my/config-from-file",
  "cwd": undefined,
  "dryRun": true,
  "forceWriteChangeFiles": true,
  "git": {
    "baseBranch": "next",
    "commitSha": "HEAD",
    "push": true,
    "remote": "origin",
    "tag": false,
  },
  "jobs": 3,
  "logLevel": undefined,
  "maxConcurrentReads": 10,
  "maxConcurrentWrites": 11,
  "packageGroupManifestField": "group",
  "packageGroups": undefined,
  "persistVersions": true,
  "plugins": [
    "plugin-a",
  ],
  "prerelease": true,
  "prereleaseId": "beta",
  "prereleaseNPMTag": undefined,
  "registryMode": undefined,
  "registryUrl": "http://example.com",
  "topological": true,
  "topologicalDev": true,
  "versionStrategy": {
    "minimumStrategy": undefined,
  },
}
`;

exports[`CLI Config File gives precedence to cli flags over config file with negated flags 1`] = `
{
  "access": "public",
  "applyChangeset": false,
  "autoCommit": true,
  "autoCommitMessage": "chore: release",
  "changelogFilename": "from_file.changelog.md",
  "changesetFilename": "from_file.changes.json",
  "changesetIgnorePatterns": [],
  "commitIgnorePatterns": undefined,
  "conventionalChangelogConfig": "@my/config-from-file",
  "cwd": undefined,
  "dryRun": true,
  "forceWriteChangeFiles": true,
  "git": {
    "baseBranch": "next",
    "commitSha": "HEAD",
    "push": true,
    "remote": "origin",
    "tag": false,
  },
  "jobs": 3,
  "logLevel": undefined,
  "maxConcurrentReads": 10,
  "maxConcurrentWrites": 11,
  "packageGroupManifestField": undefined,
  "packageGroups": undefined,
  "persistVersions": false,
  "plugins": undefined,
  "prerelease": false,
  "prereleaseId": "beta",
  "prereleaseNPMTag": undefined,
  "registryMode": undefined,
  "registryUrl": "http://example.com",
  "topological": false,
  "topologicalDev": false,
  "versionStrategy": {
    "minimumStrategy": undefined,
  },
}
`;

exports[`CLI Config File reads from monoweave.config.js by default if it exists 1`] = `
{
  "access": "public",
  "applyChangeset": false,
  "autoCommit": true,
  "autoCommitMessage": "chore: release",
  "changelogFilename": "from_file.changelog.md",
  "changesetFilename": "from_file.changes.json",
  "changesetIgnorePatterns": undefined,
  "commitIgnorePatterns": [
    "skip-ci",
  ],
  "conventionalChangelogConfig": "@my/config-from-file",
  "cwd": "/tmp/cwd",
  "dryRun": true,
  "forceWriteChangeFiles": true,
  "git": {
    "baseBranch": "main",
    "commitSha": "HEAD",
    "push": true,
    "remote": "origin",
    "tag": true,
  },
  "jobs": 6,
  "logLevel": undefined,
  "maxConcurrentReads": 3,
  "maxConcurrentWrites": 5,
  "packageGroupManifestField": undefined,
  "packageGroups": undefined,
  "persistVersions": true,
  "plugins": [
    "plugin-a",
    "plugin-b",
  ],
  "prerelease": true,
  "prereleaseId": "alpha",
  "prereleaseNPMTag": "beta",
  "registryMode": "npm",
  "registryUrl": "http://example.com",
  "topological": true,
  "topologicalDev": true,
  "versionStrategy": {
    "minimumStrategy": undefined,
  },
}
`;

exports[`CLI Config File reads from specified config file using absolute path 1`] = `
{
  "access": "public",
  "applyChangeset": false,
  "autoCommit": true,
  "autoCommitMessage": "chore: release",
  "changelogFilename": "from_file.changelog.md",
  "changesetFilename": "from_file.changes.json",
  "changesetIgnorePatterns": undefined,
  "commitIgnorePatterns": [
    "skip-ci",
  ],
  "conventionalChangelogConfig": "@my/config-from-file",
  "cwd": undefined,
  "dryRun": true,
  "forceWriteChangeFiles": true,
  "git": {
    "baseBranch": "main",
    "commitSha": "HEAD",
    "push": true,
    "remote": "origin",
    "tag": true,
  },
  "jobs": 6,
  "logLevel": undefined,
  "maxConcurrentReads": 3,
  "maxConcurrentWrites": 5,
  "packageGroupManifestField": undefined,
  "packageGroups": {
    "pkg-1": {
      "registryMode": "npm",
    },
    "pkg-2": {
      "registryMode": "manifest",
    },
  },
  "persistVersions": true,
  "plugins": [
    "plugin-a",
    "plugin-b",
  ],
  "prerelease": true,
  "prereleaseId": "alpha",
  "prereleaseNPMTag": "beta",
  "registryMode": "manifest",
  "registryUrl": "http://example.com",
  "topological": true,
  "topologicalDev": true,
  "versionStrategy": {
    "minimumStrategy": "minor",
  },
}
`;

exports[`CLI Config File reads from specified config file using path relative to cwd 1`] = `
{
  "access": "restricted",
  "applyChangeset": false,
  "autoCommit": undefined,
  "autoCommitMessage": undefined,
  "changelogFilename": "from_file.changelog.md",
  "changesetFilename": "from_file.changes.json",
  "changesetIgnorePatterns": undefined,
  "commitIgnorePatterns": undefined,
  "conventionalChangelogConfig": {
    "name": "@my/config-from-file",
    "someData": 123,
  },
  "cwd": "/tmp/cwd",
  "dryRun": true,
  "forceWriteChangeFiles": true,
  "git": {
    "baseBranch": "main",
    "commitSha": "HEAD",
    "push": true,
    "remote": "origin",
    "tag": false,
  },
  "jobs": 6,
  "logLevel": undefined,
  "maxConcurrentReads": 6,
  "maxConcurrentWrites": 2,
  "packageGroupManifestField": undefined,
  "packageGroups": undefined,
  "persistVersions": true,
  "plugins": undefined,
  "prerelease": false,
  "prereleaseId": undefined,
  "prereleaseNPMTag": "alpha",
  "registryMode": undefined,
  "registryUrl": "http://example.com",
  "topological": true,
  "topologicalDev": true,
  "versionStrategy": {
    "minimumStrategy": undefined,
  },
}
`;

exports[`CLI Config File reads from specified config file using relative path 1`] = `
{
  "access": "public",
  "applyChangeset": false,
  "autoCommit": undefined,
  "autoCommitMessage": undefined,
  "changelogFilename": "from_file.changelog.md",
  "changesetFilename": "from_file.changes.json",
  "changesetIgnorePatterns": [
    "*.test.js",
    "*.snap",
  ],
  "commitIgnorePatterns": undefined,
  "conventionalChangelogConfig": "@my/config-from-file",
  "cwd": "/tmp/cwd",
  "dryRun": true,
  "forceWriteChangeFiles": true,
  "git": {
    "baseBranch": "main",
    "commitSha": "HEAD",
    "push": true,
    "remote": "origin",
    "tag": false,
  },
  "jobs": 6,
  "logLevel": undefined,
  "maxConcurrentReads": 2,
  "maxConcurrentWrites": 1,
  "packageGroupManifestField": "group",
  "packageGroups": undefined,
  "persistVersions": true,
  "plugins": undefined,
  "prerelease": undefined,
  "prereleaseId": undefined,
  "prereleaseNPMTag": undefined,
  "registryMode": undefined,
  "registryUrl": "http://example.com",
  "topological": true,
  "topologicalDev": true,
  "versionStrategy": {
    "minimumStrategy": undefined,
  },
}
`;

exports[`CLI Presets merges preset with overrides, defined in config file 1`] = `
{
  "access": "infer",
  "applyChangeset": false,
  "autoCommit": undefined,
  "autoCommitMessage": undefined,
  "changelogFilename": "from_file.changelog.md",
  "changesetFilename": "from_file.changes.json",
  "changesetIgnorePatterns": [
    "*.snap",
  ],
  "commitIgnorePatterns": undefined,
  "conventionalChangelogConfig": "@my/config-from-file",
  "cwd": "/tmp/cwd",
  "dryRun": true,
  "forceWriteChangeFiles": true,
  "git": {
    "baseBranch": "main-1",
    "commitSha": "HEAD",
    "push": false,
    "remote": "upstream",
    "tag": false,
  },
  "jobs": 2,
  "logLevel": undefined,
  "maxConcurrentReads": 0,
  "maxConcurrentWrites": 1,
  "packageGroupManifestField": "group",
  "packageGroups": undefined,
  "persistVersions": true,
  "plugins": undefined,
  "prerelease": undefined,
  "prereleaseId": undefined,
  "prereleaseNPMTag": undefined,
  "registryMode": undefined,
  "registryUrl": "http://example.com",
  "topological": true,
  "topologicalDev": true,
  "versionStrategy": {
    "minimumStrategy": undefined,
  },
}
`;

exports[`CLI Presets merges preset with overrides, with preset passed as cli arg 1`] = `
{
  "access": "infer",
  "applyChangeset": false,
  "autoCommit": undefined,
  "autoCommitMessage": undefined,
  "changelogFilename": "from_file.changelog.md",
  "changesetFilename": "from_file.changes.json",
  "changesetIgnorePatterns": [
    "*.snap",
  ],
  "commitIgnorePatterns": undefined,
  "conventionalChangelogConfig": "@my/config-from-file",
  "cwd": "/tmp/cwd",
  "dryRun": true,
  "forceWriteChangeFiles": true,
  "git": {
    "baseBranch": "main-1",
    "commitSha": "HEAD",
    "push": false,
    "remote": "upstream",
    "tag": false,
  },
  "jobs": 2,
  "logLevel": undefined,
  "maxConcurrentReads": 0,
  "maxConcurrentWrites": 1,
  "packageGroupManifestField": "group",
  "packageGroups": undefined,
  "persistVersions": true,
  "plugins": undefined,
  "prerelease": undefined,
  "prereleaseId": undefined,
  "prereleaseNPMTag": undefined,
  "registryMode": undefined,
  "registryUrl": "http://example.com",
  "topological": true,
  "topologicalDev": true,
  "versionStrategy": {
    "minimumStrategy": undefined,
  },
}
`;

exports[`CLI Presets reads built-in presets 1`] = `
{
  "access": "public",
  "applyChangeset": false,
  "autoCommit": true,
  "autoCommitMessage": "chore: release",
  "changelogFilename": "from_file.changelog.md",
  "changesetFilename": "from_file.changes.json",
  "changesetIgnorePatterns": [
    "**/*.test.*",
  ],
  "commitIgnorePatterns": [
    "\\[skip-ci\\]",
  ],
  "conventionalChangelogConfig": "@my/config-from-file",
  "cwd": "/tmp/cwd",
  "dryRun": true,
  "forceWriteChangeFiles": true,
  "git": {
    "baseBranch": "main",
    "commitSha": "HEAD",
    "push": true,
    "remote": "origin",
    "tag": true,
  },
  "jobs": 6,
  "logLevel": undefined,
  "maxConcurrentReads": 3,
  "maxConcurrentWrites": 5,
  "packageGroupManifestField": undefined,
  "packageGroups": undefined,
  "persistVersions": true,
  "plugins": [
    "plugin-a",
    "plugin-b",
  ],
  "prerelease": true,
  "prereleaseId": "alpha",
  "prereleaseNPMTag": "beta",
  "registryMode": undefined,
  "registryUrl": "http://example.com",
  "topological": true,
  "topologicalDev": true,
  "versionStrategy": {
    "minimumStrategy": undefined,
  },
}
`;
